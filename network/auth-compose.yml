services:
  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: authentik-postgresql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgresql:/var/lib/postgresql/data
    env_file:
      - ../.authentik.env
    networks:
      - authentik

  redis:
    image: docker.io/library/redis:alpine
    container_name: authentik-redis
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - authentik

  authentik-server:
    image: ghcr.io/goauthentik/server:2024.4.2
    container_name: authentik-server
    restart: unless-stopped
    command: server
    env_file:
      - ../.authentik.env
    volumes:
      - /mnt/storage/authentik/media:/media
      - /mnt/storage/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      authentik:
      proxy:
        # Necessary for setting homeassistant trusted_proxies
        ipv4_address: 172.19.0.100

  authentik-worker:
    image: ghcr.io/goauthentik/server:2024.4.2
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    env_file:
      - ../.authentik.env
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /mnt/storage/authentik/media:/media
      - /mnt/storage/authentik/certs/live:/certs
      - /mnt/storage/authentik/certs/archive:/archive
      - /mnt/storage/authentik/custom-templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      authentik:
      proxy:
        # Necessary for setting homeassistant trusted_proxies
        ipv4_address: 172.19.0.101

  certbot:
    image: certbot/dns-route53:latest
    container_name: certbot
    environment:
      AWS_ACCESS_KEY_ID: $ROUTE_53_ACCESS_KEY
      AWS_SECRET_ACCESS_KEY: $ROUTE_53_SECRET
    volumes:
      - /mnt/storage/authentik/certs:/etc/letsencrypt
    command:
      - certonly
      - --non-interactive
      - --agree-tos
      - -m paul.diloreto@gmail.com
      - -d *.pauld.link
      - --dns-route53

volumes:
  redis:
  postgresql:

networks:
  authentik:
  proxy:
    external: true
